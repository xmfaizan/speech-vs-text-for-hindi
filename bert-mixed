{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":8747350,"sourceType":"datasetVersion","datasetId":5253050}],"dockerImageVersionId":30733,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-06-21T11:13:25.524961Z","iopub.execute_input":"2024-06-21T11:13:25.526012Z","iopub.status.idle":"2024-06-21T11:13:25.536160Z","shell.execute_reply.started":"2024-06-21T11:13:25.525977Z","shell.execute_reply":"2024-06-21T11:13:25.535182Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"/kaggle/input/hindiwrittspok/mixed.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"Using the mixed dataset","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport os\nimport torch\nfrom torch import nn\nfrom torch.utils.data import DataLoader, Dataset\nfrom transformers import BertTokenizer, BertModel, AdamW, get_linear_schedule_with_warmup\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import accuracy_score, classification_report","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:13:29.564644Z","iopub.execute_input":"2024-06-21T11:13:29.565351Z","iopub.status.idle":"2024-06-21T11:13:35.814152Z","shell.execute_reply.started":"2024-06-21T11:13:29.565323Z","shell.execute_reply":"2024-06-21T11:13:35.813150Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"code","source":"def hindi_data(data_file):\n    df = pd.read_csv(data_file,encoding='utf-8')\n    texts = df['texts'].tolist()\n    labels = df['label'].tolist()\n    return texts, labels","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:13:35.816080Z","iopub.execute_input":"2024-06-21T11:13:35.816880Z","iopub.status.idle":"2024-06-21T11:13:35.822068Z","shell.execute_reply.started":"2024-06-21T11:13:35.816842Z","shell.execute_reply":"2024-06-21T11:13:35.821176Z"},"trusted":true},"execution_count":4,"outputs":[]},{"cell_type":"code","source":"data_file = '/kaggle/input/hindiwrittspok/mixed.csv'\ntexts, labels = hindi_data(data_file)\ntexts, labels = hindi_data(data_file)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:13:35.823362Z","iopub.execute_input":"2024-06-21T11:13:35.823730Z","iopub.status.idle":"2024-06-21T11:13:36.902735Z","shell.execute_reply.started":"2024-06-21T11:13:35.823696Z","shell.execute_reply":"2024-06-21T11:13:36.901966Z"},"trusted":true},"execution_count":5,"outputs":[]},{"cell_type":"code","source":"print(f\"Total texts: {len(texts)}, Total labels: {len(labels)}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:13:36.904681Z","iopub.execute_input":"2024-06-21T11:13:36.904967Z","iopub.status.idle":"2024-06-21T11:13:36.909796Z","shell.execute_reply.started":"2024-06-21T11:13:36.904941Z","shell.execute_reply":"2024-06-21T11:13:36.908693Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Total texts: 101601, Total labels: 101601\n","output_type":"stream"}]},{"cell_type":"code","source":"#tokenizing, handling the seq_length, and providing with input IDs, attention masks, and labels\nclass TextClassificationDataset(Dataset):\n  def __init__(self, texts, labels, tokenizer, max_length):\n        self.texts = texts\n        self.labels = labels\n        self.tokenizer = tokenizer\n        self.max_length = max_length\n\n  def __len__(self):\n        return len(self.texts)\n\n  def __getitem__(self, idx):\n        text = self.texts[idx]\n        label = self.labels[idx]\n\n        try:\n            encoding = self.tokenizer(text, return_tensors='pt', max_length=self.max_length, padding='max_length', truncation=True)\n        except ValueError as e:\n            print(f\"Skipping example at index {idx}: {e}\")\n            return None\n\n        return {\n            'input_ids': encoding['input_ids'].flatten(),\n            'attention_mask': encoding['attention_mask'].flatten(),\n            'labels': torch.tensor(label, dtype=torch.long)\n        }","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:40.868094Z","iopub.execute_input":"2024-06-21T11:41:40.868465Z","iopub.status.idle":"2024-06-21T11:41:40.878034Z","shell.execute_reply.started":"2024-06-21T11:41:40.868435Z","shell.execute_reply":"2024-06-21T11:41:40.877010Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"class BERTClassifier(nn.Module):\n    def __init__(self, bert_model_name, num_classes):\n        super(BERTClassifier, self).__init__()\n        self.bert = BertModel.from_pretrained(bert_model_name)\n        self.dropout = nn.Dropout(0.1)\n        self.fc = nn.Linear(self.bert.config.hidden_size, num_classes)\n\n    def forward(self, input_ids, attention_mask):\n        outputs = self.bert(input_ids=input_ids, attention_mask=attention_mask)\n        pooled_output = outputs.pooler_output\n        x = self.dropout(pooled_output)\n        logits = self.fc(x)\n        return logits","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:41.222304Z","iopub.execute_input":"2024-06-21T11:41:41.222685Z","iopub.status.idle":"2024-06-21T11:41:41.229466Z","shell.execute_reply.started":"2024-06-21T11:41:41.222653Z","shell.execute_reply":"2024-06-21T11:41:41.228442Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"def train(model, data_loader, optimizer, scheduler, device):\n    model.train()\n    for batch in data_loader:\n        optimizer.zero_grad()\n        input_ids = batch['input_ids'].to(device)\n        attention_mask = batch['attention_mask'].to(device)\n        labels = batch['labels'].to(device)  # Correct key is 'labels'\n        outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n        loss = nn.CrossEntropyLoss()(outputs, labels)\n        loss.backward()\n        optimizer.step()\n        scheduler.step()","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:41.584131Z","iopub.execute_input":"2024-06-21T11:41:41.585032Z","iopub.status.idle":"2024-06-21T11:41:41.591468Z","shell.execute_reply.started":"2024-06-21T11:41:41.584995Z","shell.execute_reply":"2024-06-21T11:41:41.590500Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"def evaluate(model, data_loader, device):\n    model.eval()\n    predictions = []\n    actual_labels = []\n    with torch.no_grad():\n        for batch in data_loader:\n            input_ids = batch['input_ids'].to(device)\n            attention_mask = batch['attention_mask'].to(device)\n            labels = batch['labels'].to(device)  # Correct key is 'labels'\n            outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n            _, preds = torch.max(outputs, dim=1)\n            predictions.extend(preds.cpu().tolist())\n            actual_labels.extend(labels.cpu().tolist())\n    return accuracy_score(actual_labels, predictions), classification_report(actual_labels, predictions)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:41.973437Z","iopub.execute_input":"2024-06-21T11:41:41.973858Z","iopub.status.idle":"2024-06-21T11:41:41.981488Z","shell.execute_reply.started":"2024-06-21T11:41:41.973826Z","shell.execute_reply":"2024-06-21T11:41:41.980412Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"from torch.nn.utils.rnn import pad_sequence\n\ndef collate_fn(batch):\n    \"\"\"\n    Custom collate function to handle the batching of data.\n    \"\"\"\n    # Filter out None items\n    batch = [item for item in batch if item is not None]\n\n    if not batch:  # Handle the case where all items in the batch are None\n        return None\n\n    input_ids = [item['input_ids'] for item in batch]\n    attention_mask = [item['attention_mask'] for item in batch]\n    labels = [item['labels'] for item in batch]\n\n    # Pad sequences to the same length\n    input_ids = pad_sequence(input_ids, batch_first=True, padding_value=tokenizer.pad_token_id)\n    attention_mask = pad_sequence(attention_mask, batch_first=True, padding_value=0)\n\n    # Convert labels to a tensor\n    labels = torch.tensor(labels)\n\n    return {\n        'input_ids': input_ids,\n        'attention_mask': attention_mask,\n        'labels': labels\n    }","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:42.377381Z","iopub.execute_input":"2024-06-21T11:41:42.378104Z","iopub.status.idle":"2024-06-21T11:41:42.385230Z","shell.execute_reply.started":"2024-06-21T11:41:42.378072Z","shell.execute_reply":"2024-06-21T11:41:42.384196Z"},"trusted":true},"execution_count":28,"outputs":[]},{"cell_type":"code","source":"def prediction(text, model, tokenizer, device, max_length=128):\n    model.eval()\n    encoding = tokenizer(text, return_tensors='pt', max_length=max_length, padding='max_length', truncation=True)\n    input_ids = encoding['input_ids'].to(device)\n    attention_mask = encoding['attention_mask'].to(device)\n\n    with torch.no_grad():\n        outputs = model(input_ids=input_ids, attention_mask=attention_mask)\n        _, preds = torch.max(outputs, dim=1)\n\n    return \"spoken\" if preds.item() == 1 else \"written\"","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:42.707007Z","iopub.execute_input":"2024-06-21T11:41:42.707727Z","iopub.status.idle":"2024-06-21T11:41:42.713763Z","shell.execute_reply.started":"2024-06-21T11:41:42.707695Z","shell.execute_reply":"2024-06-21T11:41:42.712845Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# Set up parameters\nbert_model_name = 'bert-base-uncased'\nnum_classes = 2\nmax_length = 128\nbatch_size = 16\nnum_epochs = 4\nlearning_rate = 0.5e-5","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:43.051629Z","iopub.execute_input":"2024-06-21T11:41:43.052433Z","iopub.status.idle":"2024-06-21T11:41:43.056672Z","shell.execute_reply.started":"2024-06-21T11:41:43.052403Z","shell.execute_reply":"2024-06-21T11:41:43.055603Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"train_texts, rem_texts, train_labels, rem_labels = train_test_split(texts, labels, train_size=0.6, random_state=42)\n\n# Then split the remaining data into 50% validation and 50% test (which is 20% of total each)\nval_texts, test_texts, val_labels, test_labels = train_test_split(rem_texts, rem_labels, test_size=0.5, random_state=42)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:43.703732Z","iopub.execute_input":"2024-06-21T11:41:43.704090Z","iopub.status.idle":"2024-06-21T11:41:43.779559Z","shell.execute_reply.started":"2024-06-21T11:41:43.704061Z","shell.execute_reply":"2024-06-21T11:41:43.778847Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"print(len(train_texts))\nprint(len(train_labels))\nprint(len(val_texts))\nprint(len(val_labels))","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:44.446491Z","iopub.execute_input":"2024-06-21T11:41:44.446860Z","iopub.status.idle":"2024-06-21T11:41:44.451982Z","shell.execute_reply.started":"2024-06-21T11:41:44.446831Z","shell.execute_reply":"2024-06-21T11:41:44.451012Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"60960\n60960\n20320\n20320\n","output_type":"stream"}]},{"cell_type":"code","source":"# Load tokenizer\ntokenizer = BertTokenizer.from_pretrained(bert_model_name)\n\n# Create datasets\ntrain_dataset = TextClassificationDataset(train_texts, train_labels, tokenizer, max_length)\nval_dataset = TextClassificationDataset(val_texts, val_labels, tokenizer, max_length)\n\n# Create dataloaders\ntrain_dataloader = DataLoader(train_dataset, batch_size=batch_size, shuffle=True, collate_fn=collate_fn)\nval_dataloader = DataLoader(val_dataset, batch_size=batch_size, collate_fn=collate_fn)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:44.776449Z","iopub.execute_input":"2024-06-21T11:41:44.776828Z","iopub.status.idle":"2024-06-21T11:41:45.191626Z","shell.execute_reply.started":"2024-06-21T11:41:44.776797Z","shell.execute_reply":"2024-06-21T11:41:45.190818Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"device = torch.device(\"cuda\" if torch.cuda.is_available() else \"cpu\")\nmodel = BERTClassifier(bert_model_name, num_classes).to(device)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:45.193262Z","iopub.execute_input":"2024-06-21T11:41:45.193602Z","iopub.status.idle":"2024-06-21T11:41:45.787181Z","shell.execute_reply.started":"2024-06-21T11:41:45.193552Z","shell.execute_reply":"2024-06-21T11:41:45.786088Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"optimizer = AdamW(model.parameters(), lr=learning_rate)\ntotal_steps = len(train_dataloader) * num_epochs\nscheduler = get_linear_schedule_with_warmup(optimizer, num_warmup_steps=0, num_training_steps=total_steps)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:45.788942Z","iopub.execute_input":"2024-06-21T11:41:45.789236Z","iopub.status.idle":"2024-06-21T11:41:45.800331Z","shell.execute_reply.started":"2024-06-21T11:41:45.789210Z","shell.execute_reply":"2024-06-21T11:41:45.799432Z"},"trusted":true},"execution_count":35,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/transformers/optimization.py:588: FutureWarning: This implementation of AdamW is deprecated and will be removed in a future version. Use the PyTorch implementation torch.optim.AdamW instead, or set `no_deprecation_warning=True` to disable this warning\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"code","source":"for epoch in range(num_epochs):\n    print(f\"Epoch {epoch + 1}/{num_epochs}\")\n    train(model, train_dataloader, optimizer, scheduler, device)\n    accuracy, report = evaluate(model, val_dataloader, device)\n    print(f\"Validation Accuracy: {accuracy:.4f}\")\n    print(report)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T11:41:46.006243Z","iopub.execute_input":"2024-06-21T11:41:46.006639Z","iopub.status.idle":"2024-06-21T12:39:46.174257Z","shell.execute_reply.started":"2024-06-21T11:41:46.006608Z","shell.execute_reply":"2024-06-21T12:39:46.173228Z"},"trusted":true},"execution_count":36,"outputs":[{"name":"stdout","text":"Epoch 1/4\nSkipping example at index 23693: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 20138: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60667: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 10571: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15027: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 46233: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5820: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60311: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9515: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26732: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 781: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26077: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 58629: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45224: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45370: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48646: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2713: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 27853: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3864: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 43260: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5884: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 40879: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 35776: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48445: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15978: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 44497: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2962: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3112: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 4993: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 7239: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9966: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 14775: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 16161: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 19395: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nValidation Accuracy: 0.9583\n              precision    recall  f1-score   support\n\n           0       0.98      0.97      0.97     16498\n           1       0.88      0.90      0.89      3814\n\n    accuracy                           0.96     20312\n   macro avg       0.93      0.94      0.93     20312\nweighted avg       0.96      0.96      0.96     20312\n\nEpoch 2/4\nSkipping example at index 35776: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26732: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9515: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60311: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 23693: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15027: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2713: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3864: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45224: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48445: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5884: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 46233: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26077: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15978: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 44497: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60667: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 40879: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 43260: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 20138: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 27853: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 58629: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 781: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45370: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48646: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5820: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 10571: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2962: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3112: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 4993: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 7239: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9966: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 14775: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 16161: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 19395: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nValidation Accuracy: 0.9666\n              precision    recall  f1-score   support\n\n           0       0.97      0.99      0.98     16498\n           1       0.94      0.87      0.91      3814\n\n    accuracy                           0.97     20312\n   macro avg       0.96      0.93      0.94     20312\nweighted avg       0.97      0.97      0.97     20312\n\nEpoch 3/4\nSkipping example at index 35776: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2713: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 43260: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60667: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 781: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 58629: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 27853: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 40879: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60311: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15978: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 44497: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9515: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 10571: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 46233: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3864: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5884: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15027: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45224: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26077: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26732: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48445: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48646: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 23693: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 20138: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45370: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5820: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2962: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3112: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 4993: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 7239: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9966: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 14775: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 16161: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 19395: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nValidation Accuracy: 0.9702\n              precision    recall  f1-score   support\n\n           0       0.98      0.99      0.98     16498\n           1       0.95      0.89      0.92      3814\n\n    accuracy                           0.97     20312\n   macro avg       0.96      0.94      0.95     20312\nweighted avg       0.97      0.97      0.97     20312\n\nEpoch 4/4\nSkipping example at index 5884: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15978: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48445: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45370: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3864: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2713: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 44497: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 10571: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 27853: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 46233: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26077: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 48646: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5820: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 43260: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 26732: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 40879: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60667: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9515: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 20138: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 23693: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 15027: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 45224: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 60311: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 781: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 35776: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 58629: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 2962: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 3112: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 4993: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 7239: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9966: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 14775: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 16161: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 19395: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nValidation Accuracy: 0.9720\n              precision    recall  f1-score   support\n\n           0       0.98      0.99      0.98     16498\n           1       0.94      0.91      0.92      3814\n\n    accuracy                           0.97     20312\n   macro avg       0.96      0.95      0.95     20312\nweighted avg       0.97      0.97      0.97     20312\n\n","output_type":"stream"}]},{"cell_type":"code","source":"test_dataset = TextClassificationDataset(test_texts, test_labels, tokenizer, max_length)\ntest_dataloader = DataLoader(test_dataset, batch_size=batch_size, collate_fn=collate_fn)\ntest_accuracy, test_report = evaluate(model, test_dataloader, device)\nprint(f\"Test Accuracy: {test_accuracy:.4f}\")\nprint(test_report)","metadata":{"execution":{"iopub.status.busy":"2024-06-21T12:39:53.338220Z","iopub.execute_input":"2024-06-21T12:39:53.338596Z","iopub.status.idle":"2024-06-21T12:41:29.768869Z","shell.execute_reply.started":"2024-06-21T12:39:53.338562Z","shell.execute_reply":"2024-06-21T12:41:29.767921Z"},"trusted":true},"execution_count":37,"outputs":[{"name":"stdout","text":"Skipping example at index 402: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5019: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 5829: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 7068: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 7710: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 8390: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9033: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 9560: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nSkipping example at index 16518: text input must be of type `str` (single example), `List[str]` (batch or single pretokenized example) or `List[List[str]]` (batch of pretokenized examples).\nTest Accuracy: 0.9712\n              precision    recall  f1-score   support\n\n           0       0.98      0.98      0.98     16326\n           1       0.94      0.92      0.93      3986\n\n    accuracy                           0.97     20312\n   macro avg       0.96      0.95      0.95     20312\nweighted avg       0.97      0.97      0.97     20312\n\n","output_type":"stream"}]},{"cell_type":"code","source":"test_text = \"cutom i/p।\"\npredict = prediction(test_text, model, tokenizer, device)\nprint(test_text)\nprint(f\"Predicted sentiment: {predict}\")","metadata":{"execution":{"iopub.status.busy":"2024-06-21T12:56:05.898237Z","iopub.execute_input":"2024-06-21T12:56:05.898661Z","iopub.status.idle":"2024-06-21T12:56:05.919145Z","shell.execute_reply.started":"2024-06-21T12:56:05.898628Z","shell.execute_reply":"2024-06-21T12:56:05.918218Z"},"trusted":true},"execution_count":40,"outputs":[{"name":"stdout","text":"तुम एक काले बंदर हो जिसके कोई दोस्त नहीं हैं।\nPredicted sentiment: spoken\n","output_type":"stream"}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}